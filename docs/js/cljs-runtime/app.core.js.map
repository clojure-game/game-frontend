{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/server-address","f__28590__auto__","js/goog.DEBUG","temp__5804__auto__","app.core/header","f__28580__auto__","*current-component*-orig-val__28756","uix.core/*current-component*","*current-component*-temp-val__28757","js/window","js/window.uix","js/window.uix.dev","sig__28584__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","uix.compiler.aot/>el","uix.compiler.attributes/interpret-attrs","app.core/footer","*current-component*-orig-val__28758","*current-component*-temp-val__28759","props__28592__auto__","clj-props__28593__auto__","uix.core/glue-args","vec__28760","map__28763","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","f__28594__auto__","app.core/game-component","*current-component*-orig-val__28796","*current-component*-temp-val__28797","cljs.core/map?","js/Error","size","vec__28764","game-state","set-game-state!","uix.core/use-state","filter-game-enteties","filter-fn","cljs.core.filter","get-entities-by-type","type","game-entity","cljs.core._EQ_","game-blocks","game-players","game-bombs","game-powerups","js/window.addEventListener","e","send-action","path","query-params","c__27860__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27861__auto__","switch__27763__auto__","state_28784","state_val_28785","inst_28767","inst_28768","inst_28769","inst_28770","cljs.core/PersistentHashMap","inst_28771","cljs.core.async.impl.ioc-helpers/take!","inst_28773","inst_28774","inst_28775","statearr-28786","statearr-28787","statearr-28788","inst_28777","inst_28778","inst_28779","statearr-28789","statearr-28790","inst_28782","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28791","state-machine__27764__auto__","ret-value__27765__auto__","result__27766__auto__","cljs.core/keyword-identical?","ex__27767__auto__","e28792","statearr-28793","cljs.core/seq","statearr-28794","cljs.core/first","state__27862__auto__","statearr-28795","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","clojure.edn.read_string","move","player","direction","place-bomb","explode-bomb","is-event-key?","key","cljs.core.range","cljs.core.map","y","uix.compiler.attributes/keyword->string","x","has-position?","entities","cljs.core/not-empty","entity","is-blocked?","is-bomb?","is-powerup?","is-player?","player-id","is-player-1?","is-player-2?","app.core/button","*current-component*-orig-val__28798","*current-component*-temp-val__28799","app.core/use-persistent-state","store-key","initial-value","vec__28801","value","set-value!","uix.hooks.alpha.use_effect","uix.core/jsfy-deps","js/localStorage.getItem","G__28805","p1__28800#","cljs.core.into","js/localStorage.setItem","app.core/app","*current-component*-orig-val__28809","*current-component*-temp-val__28810","vec__28806","todos","set-todos!","cljs.core/sorted-map-by","cljs.core/>","uix.compiler.alpha/component-element","js/app","js/app.core","js/app.core.root","app.core/root","uix.dom.create_root","js/document.getElementById","app.core/render","uix.dom/render-root","app.core/init"],"sourcesContent":["(ns app.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require\n   [cljs.spec.alpha :as s]\n   [clojure.edn :as edn]\n   [uix.core :as uix :refer [defui $]]\n   [uix.dom]\n   [cljs-http.client :as http]\n   [cljs.core.async :refer [<!]]))\n\n(def server-address \"http://localhost:8001\")\n\n(defui header []\n  ($ :header.app-header\n     ($ :h3 \"Bomberman game \ud83d\udca3\")))\n\n(defui footer []\n  ($ :footer.app-footer\n     ($ :small \"made with \"\n        ($ :a {:href \"https://github.com/pitch-io/uix\"}\n           \"UIx\"))))\n\n(defui game-component [{:keys [size]}]\n  (let [[game-state set-game-state!] (uix.core/use-state {})\n        filter-game-enteties (fn [filter-fn] (filter filter-fn game-state))\n        get-entities-by-type (fn [type] (filter-game-enteties\n                                         (fn [game-entity]\n                                           (= type\n                                              (:type game-entity)))))\n        game-blocks (get-entities-by-type :block)\n        game-players (filter-game-enteties (fn [game-entity]\n                                             (or (= :p1\n                                                    (:type game-entity))\n                                                 (= :p2\n                                                    (:type game-entity)))))\n        game-bombs (get-entities-by-type :bomb)\n        game-powerups (get-entities-by-type :powerup)]\n    (js/window.addEventListener\n     \"keydown\"\n     (fn [^js e]\n       (let [send-action (fn [path query-params]\n                           (go (let [response (<! (http/get (str server-address path)\n                                                            {:query-params query-params}))]\n                                 (when-let [_ (seq (:body response))]\n                                   (set-game-state! (clojure.edn/read-string (:body response)))))))\n             move (fn [player direction]\n                    (send-action  \"/move\" {\"direction\" direction \"player\" player}))\n             place-bomb (fn [player]\n                          (send-action \"/place-bomb\" {\"player\" player}))\n             explode-bomb (fn [player]\n                            (send-action \"/explode-bomb\" {\"player\" player}))\n             is-event-key? (fn [key] (= key (.-key e)))]\n         (cond (is-event-key? \"ArrowUp\") (move \"p1\" \"up\")\n               (is-event-key? \"ArrowDown\") (move \"p1\" \"down\")\n               (is-event-key? \"ArrowRight\") (move \"p1\" \"right\")\n               (is-event-key? \"ArrowLeft\") (move \"p1\" \"left\")\n               (is-event-key? \"j\") (place-bomb \"p1\")\n               (is-event-key? \"k\") (explode-bomb \"p1\")\n               (is-event-key? \"w\") (move \"p2\" \"up\")\n               (is-event-key? \"a\") (move \"p2\" \"left\")\n               (is-event-key? \"s\") (move \"p2\" \"down\")\n               (is-event-key? \"d\") (move \"p2\" \"right\")\n               (is-event-key? \"c\") (place-bomb \"p2\")\n               (is-event-key? \"v\") (explode-bomb \"p2\")\n               (is-event-key? \"Enter\")\n               (send-action \"/create-game\" {})))))\n    ($ :div.game\n       (->> (range size)\n            (map\n             (fn [y]\n               ($ :div {:key   y\n                        :id    y\n                        :style {:display \"flex\"}}\n                  (->> (range size)\n                       (map\n                        (fn [x]\n                          (let [has-position? (fn [entities]\n                                                (not-empty\n                                                 (filter (fn [entity]\n                                                           (= (:pos entity)\n                                                              {:x x :y y}))\n                                                         entities)))\n                                is-blocked? (has-position? game-blocks)\n                                is-bomb? (has-position? game-bombs)\n                                is-powerup? (has-position? game-powerups)\n                                is-player? (fn [player-id]\n                                             (not-empty\n                                              (filter (fn [player]\n                                                        (= {:pos {:x x :y y}\n                                                            :type player-id}\n                                                           player)) game-players)))\n                                is-player-1? (is-player? :p1)\n                                is-player-2? (is-player? :p2)]\n                            ($ :div\n                               {:key   x\n                                :id    x\n                                :style {:width            \"20px\"\n                                        :height           \"20px\"\n                                        :background-color (cond is-blocked? \"lightgrey\"\n                                                                is-player-1? \"blue\"\n                                                                is-player-2? \"red\"\n                                                                :else \"grey\")\n                                        :border           (if is-blocked?\n                                                            \"2px groove grey\"\n                                                            \"0.5px solid #404040\")\n                                        :box-sizing       \"border-box\"}}\n                               (cond\n                                 is-bomb? \"\ud83d\udca3\"\n                                 is-powerup? \"\u2b50\ufe0f\"\n                                 is-player-1? \"\"\n                                 is-player-2? \"\"\n                                 :else \"\")))))))))))))\n\n(defui button []\n  ($ :button.go-button\n     \"Press this button to do nothing, press enter to start/reset the game\"))\n\n(defn use-persistent-state\n  \"Loads initial state from local storage and persists every updated state value\n  Returns a tuple of the current state value and an updater function\"\n  [store-key initial-value]\n  (let [[value set-value!] (uix/use-state initial-value)]\n    (uix/use-effect\n     (fn []\n       (let [value (edn/read-string (js/localStorage.getItem store-key))]\n         (set-value! #(into % value))))\n     [store-key])\n    (uix/use-effect\n     (fn []\n       (js/localStorage.setItem store-key (str value)))\n     [value store-key])\n    [value set-value!]))\n\n\n(defui app []\n  (let [[todos set-todos!] (use-persistent-state \"uix-starter/todos\" (sorted-map-by >))]\n    ($ :.app\n       ($ header)\n       ($ button)\n       ($ game-component {:size 20})\n       ($ footer))))\n\n(defonce root\n  (uix.dom/create-root (js/document.getElementById \"root\")))\n\n(defn render []\n  (uix.dom/render-root ($ app) root))\n\n(defn ^:export init []\n  (render))\n"]}