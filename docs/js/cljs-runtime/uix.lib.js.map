{"version":3,"sources":["uix/lib.cljc"],"mappings":";;;;AAsBG,qBAAA,rBAAMA,kDAASC;AAAf,AACE,OAACC,oBAAU,WAAKC,EAAEC,EAAEC;AAAT,AACE,AAACC,oCAASH,EAAE,AAACI,eAAKH,GAAGC;;AACrBF;GAFb,KAIWF","names":["uix.lib/map->js","m","cljs.core/reduce-kv","o","k","v","uix.lib.goog$module$goog$object.set","cljs.core/name"],"sourcesContent":["(ns uix.lib\n  #?(:cljs (:require-macros [uix.lib :refer [doseq-loop]]))\n  #?(:cljs (:require [goog.object :as gobj]))\n  #?(:clj (:require [clojure.walk])))\n\n#?(:clj\n   (defmacro assert! [x message]\n     `(when-not ~x\n        (throw (new AssertionError (str \"Assert failed: \" ~message \"\\n\" (pr-str '~x)))))))\n\n#?(:clj\n   (defmacro doseq-loop [[v vs] & body]\n     `(let [v# ~vs]\n        (when (seq v#)\n          (loop [x# (first v#)\n                 xs# (next v#)]\n            (let [~v x#]\n              ~@body)\n            (when (seq xs#)\n              (recur (first xs#) (next xs#))))))))\n\n#?(:cljs\n   (defn map->js [m]\n     (reduce-kv (fn [o k v]\n                  (gobj/set o (name k) v)\n                  o)\n                #js {}\n                m)))\n\n#?(:clj\n   (defn cljs-env? [env]\n     (boolean (:ns env))))\n\n#?(:clj\n   (defn find-form [pred sexp]\n     (let [forms (atom [])]\n       (clojure.walk/prewalk\n        (fn [x]\n          (when (pred x)\n            (swap! forms conj x))\n          x)\n        sexp)\n       @forms)))\n"],"x_google_ignoreList":[0]}